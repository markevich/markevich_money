defmodule MarkevichMoney.Pipelines.Start.Welcome do
  use MarkevichMoney.Constants
  alias MarkevichMoney.Steps.Telegram.{SendMessage}

  @output_message """

  Добро пожаловать в "Денежную у Маркевичей"! Перед тобой бот, который поможет тебе развить финансовую осознанность через настоящее приключение!

  "Куда уходят деньги?", "Почему моя финансовая подушка скорее похожа на финансовую простыню?", "Сколько я трачу на еду каждую неделю?" - знакомые вопросы, правда? Если так, то "Денежная" - это то, что тебе нужно! С её помощью ты сможешь отслеживать свои расходы, устанавливать лимиты на категории трат, моментально получать статистику за нужный промежуток времени и многое другое.

  Но обо всём по порядку.

  "Денежная у Маркевичей" - спокойное место, в котором ты и твои данные находятся в полной безопасности. Личные данные пользователей защищены современными алгоритмами шифрования и никогда не будут переданы сторонним лицам и организациям. Мы ценим твоё доверие.

  Бот работает только с теми данными, к которым ты самостоятельно откроешь доступ. К банковскому счёту доступа нет ни прямого, ни косвенного. Твои деньги принадлежат только тебе.
  В любой момент бота можно отключить. Мы будем очень скучать, но с твоим решением спорить не будем.

  Исходный код бота доступен публично - [https://github.com/markevich/telegram_money_bot](https://github.com/markevich/telegram_money_bot) . А если возникнут какие-то вопросы, то к разработчику можно обратиться напрямую через телеграм-чат: [https://t.me/markevich_support](https://t.me/markevich_support) .

  Путь к финансовой осознанности предстоит непростой, но с "Денежной" тебе нечего бояться. Осталось убедиться в том, что соблюдены все необходимые условия:
  а) У тебя есть счёт в беларуском "Альфа-Банке";
  б) Твой мобильный телефон у тебя под рукой. Может быть, даже в руке.

  Если так, то поздравляю! Самая сложная часть пути уже пройдена! Остальное "Денежная у Маркевичей" берёт на себя.

  Нажми на кнопку ниже, чтобы начать настройку бота и знакомство с его основными функциями.
  """

  def call(payload) do
    payload
    |> Map.put(:output_message, @output_message)
    |> put_reply_markup()
    |> SendMessage.call(disable_web_page_preview: true)
  end

  defp put_reply_markup(payload) do
    reply_markup = %Nadia.Model.InlineKeyboardMarkup{
      inline_keyboard: [
        [
          %Nadia.Model.InlineKeyboardButton{
            text: "Приступить к настройке.",
            callback_data: Jason.encode!(%{pipeline: @start_callback})
          }
        ]
      ]
    }

    payload
    |> Map.put(:reply_markup, reply_markup)
  end
end
